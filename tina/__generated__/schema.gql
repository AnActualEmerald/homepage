# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  story(relativePath: String): Story!
  storyConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: StoryFilter): StoryConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
}

input DocumentFilter {
  story: StoryFilter
  post: PostFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Story | Post | Folder

type Story implements Node & Document {
  title: String!
  series: [String]
  tags: [String]
  author: String
  date: String
  showDate: Boolean
  draft: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input StoryFilter {
  title: StringFilter
  series: StringFilter
  tags: StringFilter
  author: StringFilter
  date: DatetimeFilter
  showDate: BooleanFilter
  draft: BooleanFilter
  body: RichTextFilter
}

type StoryConnectionEdges {
  cursor: String!
  node: Story
}

type StoryConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [StoryConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  tags: [String]
  categories: [String]
  author: String
  date: String
  showDate: Boolean
  dateUpdated: String
  showDateUpdated: Boolean
  draft: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostFilter {
  title: StringFilter
  tags: StringFilter
  categories: StringFilter
  author: StringFilter
  date: DatetimeFilter
  showDate: BooleanFilter
  dateUpdated: DatetimeFilter
  showDateUpdated: BooleanFilter
  draft: BooleanFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateStory(relativePath: String!, params: StoryMutation!): Story!
  createStory(relativePath: String!, params: StoryMutation!): Story!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
}

input DocumentUpdateMutation {
  story: StoryMutation
  post: PostMutation
  relativePath: String
}

input DocumentMutation {
  story: StoryMutation
  post: PostMutation
}

input StoryMutation {
  title: String
  series: [String]
  tags: [String]
  author: String
  date: String
  showDate: Boolean
  draft: Boolean
  body: JSON
}

input PostMutation {
  title: String
  tags: [String]
  categories: [String]
  author: String
  date: String
  showDate: Boolean
  dateUpdated: String
  showDateUpdated: Boolean
  draft: Boolean
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
